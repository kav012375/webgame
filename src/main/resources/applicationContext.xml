<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd
                     http://www.springframework.org/schema/tx
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                     http://www.springframework.org/schema/cache
                     http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <!--数据驱动类-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <!--数据库连接串-->
        <property name="url" value="jdbc:mysql://www.wower.pub:3306/wow"></property>
        <!--数据库用户名-->
        <property name="username" value="root"></property>
        <!--数据库密码-->
        <property name="password" value="WWww22@@"></property>
        <!--连接池启动时的初始值-->
        <property name="initialSize" value="10"></property>
        <!--连接池的最大值-->
        <property name="maxTotal" value="300"></property>
        <!--最大空闲值,当经过一个高峰时间后,连接池慢慢的释放-->
        <property name="maxIdle" value="5"></property>
        <!--最小空闲值,当空闲值少于阈值的时候,连接池会预申请一些连接,避免洪峰来临时,没有足够的资源-->
        <property name="minIdle" value="1"></property>
    </bean>
    <!--配置myabtis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:ibatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <value>classpath*:mapper/*.xml</value>
                <!--<value>classpath:com/wulin/dal/entity/*.xml</value>-->
                <!--<value>classpath:com/wulin/dal/resultmap/*.xml</value>-->
            </list>
        </property>
    </bean>
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.wulin.dal.mapper"></property>-->
    <!--</bean>-->
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wulin.dal.User.dao.UserDAO"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    <bean id="serverListMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wulin.dal.ServerList.dao.ServerListDAO"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    <bean id="RoleMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wulin.dal.Role.dao.RoleDAO"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    <bean id="ProsessionMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.wulin.dal.Prosession.dao.ProsessionDAO"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!--事务配置-->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--通过注解的方式来注入属性,启用注解扫描-->
    <context:annotation-config></context:annotation-config>
    <!-- 缓存配置 -->
    <!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
    <cache:annotation-driven cache-manager="cacheManager"/>
    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"/>
    </bean>
    <!-- 注解探测器 ， 在JUnit测试的时候需要-->
    <context:component-scan base-package="com.wulin"/>
    <!--配置接口bean-->
    <bean id="userController" class="com.wulin.biz.core.user.service.impl.UserServiceImpl"></bean>
    <bean id="checkController" class="com.wulin.biz.common.service.impl.CheckServiceImpl"></bean>
    <bean id="securityHelper" class="com.wulin.biz.common.service.impl.SecurityServiceImpl"></bean>
    <bean id="roleDataService" class="com.wulin.biz.core.role.service.impl.RoleDataImpl"></bean>
</beans>